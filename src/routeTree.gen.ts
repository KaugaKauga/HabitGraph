/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as CreateHabitImport } from './routes/create-habit'
import { Route as IndexImport } from './routes/index'
import { Route as HabitHabitIdImport } from './routes/habit.$habitId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const CreateHabitRoute = CreateHabitImport.update({
  id: '/create-habit',
  path: '/create-habit',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HabitHabitIdRoute = HabitHabitIdImport.update({
  id: '/habit/$habitId',
  path: '/habit/$habitId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create-habit': {
      id: '/create-habit'
      path: '/create-habit'
      fullPath: '/create-habit'
      preLoaderRoute: typeof CreateHabitImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/habit/$habitId': {
      id: '/habit/$habitId'
      path: '/habit/$habitId'
      fullPath: '/habit/$habitId'
      preLoaderRoute: typeof HabitHabitIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create-habit': typeof CreateHabitRoute
  '/settings': typeof SettingsRoute
  '/habit/$habitId': typeof HabitHabitIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create-habit': typeof CreateHabitRoute
  '/settings': typeof SettingsRoute
  '/habit/$habitId': typeof HabitHabitIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/create-habit': typeof CreateHabitRoute
  '/settings': typeof SettingsRoute
  '/habit/$habitId': typeof HabitHabitIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/create-habit' | '/settings' | '/habit/$habitId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/create-habit' | '/settings' | '/habit/$habitId'
  id: '__root__' | '/' | '/create-habit' | '/settings' | '/habit/$habitId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateHabitRoute: typeof CreateHabitRoute
  SettingsRoute: typeof SettingsRoute
  HabitHabitIdRoute: typeof HabitHabitIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateHabitRoute: CreateHabitRoute,
  SettingsRoute: SettingsRoute,
  HabitHabitIdRoute: HabitHabitIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create-habit",
        "/settings",
        "/habit/$habitId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create-habit": {
      "filePath": "create-habit.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/habit/$habitId": {
      "filePath": "habit.$habitId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
